var FeatureRequirement_datatable = [ {id: 1, FeatureID:"",Feature: "GUI", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407465561952,FeatureID:"637086407465561952",Feature: "separating the functionality from the UI", MoSCoW: "Must-Have", Description: "The functionality is what the software actually does and what information it processes. The user interface defines how this functionality is presented to end-users and how the users interact with it.", FeatureDataType: "Boolean", FeatureCategory: "GUI", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407464654376,FeatureID:"637086407464654376",Feature: "Separate user interface component/layer", MoSCoW: "Must-Have", Description: "The UI layer is responsible for displaying data on the page, and for handling user interaction. The UI Layer is made up of components. Components are a tool for splitting the page into smaller pieces that are easier to manage and reuse. They encapsulate both the HTML template and the related UI logic.", FeatureDataType: "Boolean", FeatureCategory: "GUI", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: ""},{id: 637086407370946104,FeatureID:"637086407370946104",Feature: "handling user input", MoSCoW: "Must-Have", Description: "handling user input", FeatureDataType: "Boolean", FeatureCategory: "GUI", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407370317788,FeatureID:"637086407370317788",Feature: "Graphic User Interface (GUI)", MoSCoW: "Must-Have", Description: "The graphical user interface is a form of user interface that allows users to interact with electronic devices through graphical icons and visual indicators such as secondary notation, instead of text-based user interfaces, typed command labels or text navigation.", FeatureDataType: "Boolean", FeatureCategory: "GUI", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},] },{id: 2, FeatureID:"",Feature: "Instances", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407484318356,FeatureID:"637086407484318356",Feature: "Single Instance", MoSCoW: "", Description: "a single instance of the software and its supporting infrastructure serves one customer.", FeatureDataType: "Boolean", FeatureCategory: "Instances", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407401053817,FeatureID:"637086407401053817",Feature: "Multi Tenancy", MoSCoW: "Must-Have", Description: "Multi-Instance architecture is where multiple customers run their own separate instance of an application and operating system running on a separate virtual machine, all on a common hardware platform. Whereas Multi-Tenant architecture consists of multiple customers using a single instance of an application running on a single instance of an operating system on a common hardware platform, with only a database or data-source being different between customers. Many multi-tenant solutions leverage a common database instance, but both architectures can support giving each customer their own separate database.", FeatureDataType: "Boolean", FeatureCategory: "Instances", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407398652768,FeatureID:"637086407398652768",Feature: "Multi instance", MoSCoW: "", Description: "In a multi-instance architecture, multiple companies will run their own separate instance of the application, with their own distinct database. Also, it could run on a different operating system (OS), and a different hardware platform, so it is very flexible. Each business will have access to its data separately from the other.", FeatureDataType: "Boolean", FeatureCategory: "Instances", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407363206767,FeatureID:"637086407363206767",Feature: "Flex Tenancy", MoSCoW: "", Description: "SaaS applications are also usually characterized as either multi-tenant, dedicated, or a combination known as flex tenancy. This designation involves shared versus dedicated cloud computing and storage resources. Flex tenancy describes the situation where a solution consists of both shared and dedicated resources.", FeatureDataType: "Boolean", FeatureCategory: "Instances", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},] },{id: 3, FeatureID:"",Feature: "Application Domain", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407531712593,FeatureID:"637086407531712593",Feature: "Web Applications / Services", MoSCoW: "Must-Have", Description: "Web Applications / Services", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "12", FeatureCriterionValue: "", _children: [{id: 637086407535691955,FeatureID:"637086407535691955",Feature: "Web-Based Systems", MoSCoW: "", Description: "The web-based systems in this sample were generally limited to the server side. Key quality attributes would include performance, extensibility, security, and availability.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Web Applications / Services", FeatureSupportedAlternatives: "11", FeatureCriterionValue: "" },{id: 637086407533807125,FeatureID:"637086407533807125",Feature: "Web Services", MoSCoW: "Must-Have", Description: "The term Web services describes a standardized way of integrating Web-based applications using the XML, SOAP, WSDL and UDDI open standards over an Internet protocol backbone. Developers can then add the Web service to a GUI (such as a Web page or an executable program) to offer specific functionality to users.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Web Applications / Services", FeatureSupportedAlternatives: "6", FeatureCriterionValue: "" },{id: 637086407469920322,FeatureID:"637086407469920322",Feature: "Service-Based Systems", MoSCoW: "", Description: "Service-oriented architecture (SOA) is a software development model for distributed application components that incorporates discovery, access control, data mapping and security features.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Web Applications / Services", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },]},{id: 637086407527731662,FeatureID:"637086407527731662",Feature: "Transaction Processing", MoSCoW: "Must-Have", Description: "Transaction Processing", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "", _children: [{id: 637086407293159589,FeatureID:"637086407293159589",Feature: "Banking System", MoSCoW: "", Description: "A banking system is a group or network of institutions that provide financial services for us. These institutions are responsible for operating a payment system, providing loans, taking deposits, and helping with investments.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Transaction Processing", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "" },]},{id: 637086407514194962,FeatureID:"637086407514194962",Feature: "Systems Software", MoSCoW: "", Description: "Systems Software", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "15", FeatureCriterionValue: "", _children: [{id: 637086407427398045,FeatureID:"637086407427398045",Feature: "Plug-and-Play Environment", MoSCoW: "", Description: "A plug and play (PnP) device or computer bus, is one with a specification that facilitates the discovery of a hardware component in a system without the need for physical device configuration or user intervention in resolving resource conflicts.[1][2] The term plug and play has since been expanded to a wide variety of applications to which the same lack of user setup applies.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Systems Software", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "" },{id: 637086407417042664,FeatureID:"637086407417042664",Feature: "Operating Systems", MoSCoW: "", Description: "An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Systems Software", FeatureSupportedAlternatives: "12", FeatureCriterionValue: "" },{id: 637086407409775754,FeatureID:"637086407409775754",Feature: "Network and Communication Systems", MoSCoW: "Could-Have", Description: "A communications system is a collection of individual communications networks, transmission systems, relay stations, tributary stations, and data terminal equipment (DTE) usually capable of interconnection and interoperation to form an integrated whole.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Systems Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },{id: 637086407408211550,FeatureID:"637086407408211550",Feature: "Multi-Processors Environment", MoSCoW: "", Description: "Multiprocessing is the use of two or more central processing units (CPUs) within a single computer system.The term also refers to the ability of a system to support more than one processor or the ability to allocate tasks between them. There are many variations on this basic theme, and the definition of multiprocessing can vary with context, mostly as a function of how CPUs are defined (multiple cores on one die, multiple dies in one package, multiple packages in one system unit, etc.).", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Systems Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },]},{id: 637086407496677217,FeatureID:"637086407496677217",Feature: "Strategic and Operations Analysis", MoSCoW: "", Description: "Strategic and Operations Analysis", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "", _children: [{id: 637086407347446608,FeatureID:"637086407347446608",Feature: "Enterprise Service Bus (ESB)", MoSCoW: "Should-Have", Description: "An enterprise service bus implements a communication system between mutually interacting software applications in a service-oriented architecture. It implements a software architecture as depicted in the picture.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Strategic and Operations Analysis", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "" },{id: 637086407346065269,FeatureID:"637086407346065269",Feature: "Enterprise Application Integration (EAI)", MoSCoW: "", Description: "metadata repository for an enterprise application integration (EAI)", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Strategic and Operations Analysis", FeatureSupportedAlternatives: "1", FeatureCriterionValue: "" },{id: 637086407317380747,FeatureID:"637086407317380747",Feature: "Customer Relationship Management (CRM)", MoSCoW: "Should-Have", Description: "Customer relationship management (CRM) is a term that refers to practices, strategies and technologies that companies use to manage and analyze customer interactions and data throughout the customer lifecycle, with the goal of improving customer service relationships and assisting in customer retention and driving sales growth. ", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Strategic and Operations Analysis", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },]},{id: 637086407377810884,FeatureID:"637086407377810884",Feature: "Information Management and Decision Support Systems", MoSCoW: "", Description: "Information Management and Decision Support Systems", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "11", FeatureCriterionValue: "", _children: [{id: 637086407393890400,FeatureID:"637086407393890400",Feature: "Management Information Systems", MoSCoW: "Should-Have", Description: "A management information system (MIS) is an information system used for decision-making, and for the coordination, control, analysis, and visualization of information in an organization. The study of management information systems examines people, processes and technology in an organizational context. In a corporate setting, the ultimate goal of the use of a management information system is to increase the value and profits of the business.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Information Management and Decision Support Systems", FeatureSupportedAlternatives: "9", FeatureCriterionValue: "" },{id: 637086407356738737,FeatureID:"637086407356738737",Feature: "Expert System", MoSCoW: "", Description: "An expert system is a computer system that emulates the decision-making ability of a human expert. Expert systems are designed to solve complex problems by reasoning through bodies of knowledge, represented mainly as if�then rules rather than through conventional procedural code.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Information Management and Decision Support Systems", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "" },]},{id: 637086407364652918,FeatureID:"637086407364652918",Feature: "Games / Entertainment", MoSCoW: "", Description: "Games / Entertainment", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "", _children: [{id: 637086407365819871,FeatureID:"637086407365819871",Feature: "Gaming Systems", MoSCoW: "", Description: "The patterns in games systems show the different important aspects of gaming systems.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Games / Entertainment", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "" },]},{id: 637086407333882693,FeatureID:"637086407333882693",Feature: "Distributed Computing", MoSCoW: "", Description: "Distributed Computing", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "19", FeatureCriterionValue: "", _children: [{id: 637086407396827641,FeatureID:"637086407396827641",Feature: "Mobile Applications", MoSCoW: "Must-Have", Description: "A mobile application, most commonly referred to as an app, is a type of application software designed to run on a mobile device, such as a smartphone or tablet computer. Mobile applications frequently serve to provide users with similar services to those accessed on PCs.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Distributed Computing", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "" },{id: 637086407336914603,FeatureID:"637086407336914603",Feature: "Distributed Systems", MoSCoW: "Must-Have", Description: "A distributed system is a network that consists of autonomous computers that are connected using a distribution middleware. They help in sharing different resources and capabilities to provide users with a single and integrated coherent network.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Distributed Computing", FeatureSupportedAlternatives: "18", FeatureCriterionValue: "" },{id: 637086407306878263,FeatureID:"637086407306878263",Feature: "Cloud Computing Applications", MoSCoW: "", Description: "Cloud computing is a technology that uses the internet and central remote servers to maintain data and applications. Cloud computing allows consumers and businesses to use applications without installation and access their personal files at any computer with internet access.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Distributed Computing", FeatureSupportedAlternatives: "5", FeatureCriterionValue: "" },]},{id: 637086407326640204,FeatureID:"637086407326640204",Feature: "Design and Engineering Software", MoSCoW: "", Description: "Design and Engineering Software", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "21", FeatureCriterionValue: "", _children: [{id: 637086407511711605,FeatureID:"637086407511711605",Feature: "System Families", MoSCoW: "", Description: "A collection or grouping of interrelated software systems in the domain that share a set of common characteristics.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "" },{id: 637086407487628540,FeatureID:"637086407487628540",Feature: "Software Product Line (Spl)", MoSCoW: "", Description: "Software product lines (SPLs), or software product line development, refers to software engineering methods, tools and techniques for creating a collection of similar software systems from a shared set of software assets using a common means of production.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "5", FeatureCriterionValue: "" },{id: 637086407379697806,FeatureID:"637086407379697806",Feature: "Interactive System", MoSCoW: "", Description: "Interactive systems are computer systems characterized by significant amounts of interaction between humans and the computer. Most users have grown up using Macintosh or Windows computer operating systems, which are prime examples of graphical interactive systems.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "" },{id: 637086407318560489,FeatureID:"637086407318560489",Feature: "Data Base Systems", MoSCoW: "", Description: "A Database Management System (DBMS) is a system (software) that provides an interface to database for information storage and retrieval. We are more interested in software systems rather than manual systems because they can do the job more efficiently. The common features of a DBMS includes.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "5", FeatureCriterionValue: "" },{id: 637086407314591950,FeatureID:"637086407314591950",Feature: "Context-Aware Systems", MoSCoW: "", Description: "Context awareness is the ability of a system or system component to gather information about its environment at any given time and adapt behaviors accordingly. Contextual or context-aware computing uses software and hardware to automatically collect and analyze data to guide responses.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "8", FeatureCriterionValue: "" },{id: 637086407310189982,FeatureID:"637086407310189982",Feature: "Compiler Design", MoSCoW: "", Description: "Compiler design covers basic translation mechanism and error detection & recovery. It includes lexical, syntax, and semantic analysis as front end, and code generation and optimization as back-end.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "6", FeatureCriterionValue: "" },{id: 637086407308404173,FeatureID:"637086407308404173",Feature: "Commercial-Off-The-Shelf (Cots)", MoSCoW: "", Description: "Short for commercial off-the-shelf, an adjective that describes software or hardware products that are ready-made and available for sale to the general public. For example, Microsoft Office is a COTS product that is a packaged software solution for businesses.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },{id: 637086407299468058,FeatureID:"637086407299468058",Feature: "Case & Related Developer Tools", MoSCoW: "", Description: "Our sample included only four such systems.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },{id: 637086407281290902,FeatureID:"637086407281290902",Feature: "Adaptable Systems", MoSCoW: "", Description: "An adaptive system (or a complex adaptive system, CAS) is a system that changes its behavior in response to its environment. The adaptive change that occurs is often relevant to achieving a goal or objective. We tend to associate adaptive behavior with individual plants, animals human beings, or social groups.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Design and Engineering Software", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "" },]},{id: 637086407322600073,FeatureID:"637086407322600073",Feature: "Data-Dominant Software", MoSCoW: "", Description: "Data-Dominant Software", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "", _children: [{id: 637086407485724622,FeatureID:"637086407485724622",Feature: "Skype Network", MoSCoW: "", Description: "The Skype protocol is a proprietary Internet telephony network based on client-server architecture, used by Skype. The Skype network is not interoperable with most other Voice over IP (VoIP) networks without proper licensing from Skype.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Data-Dominant Software", FeatureSupportedAlternatives: "1", FeatureCriterionValue: "" },{id: 637086407360763311,FeatureID:"637086407360763311",Feature: "File-Sharing Applications", MoSCoW: "", Description: "A file-sharing application is a software application that facilitates collaboration and file transfer. File-sharing applications allow end users to upload files to a shared storage space and designate who may access the files. Workplace file sharing applications fall into two major groups: consumer and business grade.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Data-Dominant Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },{id: 637086407354337870,FeatureID:"637086407354337870",Feature: "Exchange Data And Information", MoSCoW: "", Description: "Data exchange is the process of taking data structured under a source schema and transforming it into data structured under a target schema, so that the target data is an accurate representation of the source data. Data exchange allows data to be shared between different computer programs.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Data-Dominant Software", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "" },]},{id: 637086407315818292,FeatureID:"637086407315818292",Feature: "Control-Dominant Software", MoSCoW: "", Description: "Control-Dominant Software", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "14", FeatureCriterionValue: "", _children: [{id: 637086407438014431,FeatureID:"637086407438014431",Feature: "Real-Time Systems", MoSCoW: "", Description: "A real time system is a time bound system which has well defined fixed time constraints. Processing must be done within the defined constraints or the system will fail. They either are event driven or time sharing.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Control-Dominant Software", FeatureSupportedAlternatives: "5", FeatureCriterionValue: "" },{id: 637086407381070543,FeatureID:"637086407381070543",Feature: "Internet Of Things (Iots)", MoSCoW: "Should-Have", Description: "The internet of things, or IoT, is a system of interrelated computing devices, mechanical and digital machines, objects, animals or people that are provided with unique identifiers (UIDs) and the ability to transfer data over a network without requiring human-to-human or human-to-computer interaction.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Control-Dominant Software", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "" },{id: 637086407343377309,FeatureID:"637086407343377309",Feature: "Embedded Systems", MoSCoW: "", Description: "Embedded systems often have important realtime constraints. In addition, they usually have limited resources such as memory and external storage.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Control-Dominant Software", FeatureSupportedAlternatives: "10", FeatureCriterionValue: "" },]},{id: 637086407313110446,FeatureID:"637086407313110446",Feature: "Computation-Dominant Software", MoSCoW: "", Description: "Computation-Dominant Software", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "", _children: [{id: 637086407489398804,FeatureID:"637086407489398804",Feature: "Speech Recognition", MoSCoW: "Could-Have", Description: "Speech recognition is the ability of a machine or program to identify words and phrases in spoken language and convert them to a machine-readable format. Rudimentary speech recognition software has a limited vocabulary of words and phrases, and it may only identify these if they are spoken very clearly.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Computation-Dominant Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },{id: 637086407477444907,FeatureID:"637086407477444907",Feature: "Signal Processing", MoSCoW: "", Description: "Digital signal processing (DSP) is the process of analyzing and modifying a signal to optimize or improve its efficiency or performance. It involves applying various mathematical and computational algorithms to analog and digital signals to produce a signal that&quot;s of higher quality than the original signal.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Computation-Dominant Software", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "" },{id: 637086407424445913,FeatureID:"637086407424445913",Feature: "Pattern Recognition", MoSCoW: "", Description: "Pattern recognition is the process of recognizing patterns by using machine learning algorithm. Pattern recognition can be defined as the classification of data based on knowledge already gained or on statistical information extracted from patterns and/or their representation.", FeatureDataType: "Boolean", FeatureCategory: "Application Domain", FeatureParent: "Computation-Dominant Software", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "" },]},] },{id: 4, FeatureID:"",Feature: "Processing", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407524778355,FeatureID:"637086407524778355",Feature: "Thread processes", MoSCoW: "", Description: "reads are used for small tasks, whereas processes are used for more &quot;heavyweight&quot; tasks � basically the execution of applications. Another difference between a thread and a process is that threads within the same process share the same address space, whereas different processes do not.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},{id: 637086407498801342,FeatureID:"637086407498801342",Feature: "support failure or unexplained absence", MoSCoW: "", Description: "support failure or unexplained absence", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407471895046,FeatureID:"637086407471895046",Feature: "share business logic between applications", MoSCoW: "Should-Have", Description: "share business logic between applications", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407468364466,FeatureID:"637086407468364466",Feature: "Sequential processing (No conccurency)", MoSCoW: "", Description: "Sequential processing refers to the mental process of integrating and understanding stimuli in a particular, serial order. Both the perception of stimuli in sequence and the subsequent production of information in a specific arrangement fall under successive processing.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407456097271,FeatureID:"637086407456097271",Feature: "self-contained", MoSCoW: "Could-Have", Description: "local control and local computation", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407454860562,FeatureID:"637086407454860562",Feature: "Self-Adaptation", MoSCoW: "", Description: " A self-adaptive system evaluates its own behavior and changes its own performance when the evaluation indicates that it is not accomplishing what the software is intended to do, or when better functionality or performance is possible", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407450823175,FeatureID:"637086407450823175",Feature: "runtime interpretation of scripts", MoSCoW: "", Description: "In interpreted-language scripts, a runtime module reads in the source code, translates the source code iSome interpreted languages have long offered runtime code evaluation.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407449251228,FeatureID:"637086407449251228",Feature: "Rules and Facts", MoSCoW: "Should-Have", Description: "Rules represent knowledge in form of a condition and associated actions. Facts represent data.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407423249132,FeatureID:"637086407423249132",Feature: "parsing facilities", MoSCoW: "", Description: "parsing facilities", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407422092210,FeatureID:"637086407422092210",Feature: "Parallel processing (Conccurencey)", MoSCoW: "", Description: "concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations. On the other hand, a well-written concurrent program might run efficiently in parallel on a multiprocessor.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "14", FeatureCriterionValue: ""},{id: 637086407399829619,FeatureID:"637086407399829619",Feature: "multi stage process", MoSCoW: "", Description: "Break down a process into multiple processes", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407388453329,FeatureID:"637086407388453329",Feature: "Live analysis", MoSCoW: "", Description: "The examination of computers from within the operating system using custom forensics or existing sysadmin tools to extract evidence. The practice is useful when dealing with Encrypting File Systems, for example, where the encryption keys may be collected and, in some instances, the logical hard drive volume may be imaged (known as a live acquisition) before the computer is shut down.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407355731431,FeatureID:"637086407355731431",Feature: "Execution byte-codes", MoSCoW: "", Description: "Bytecode is the compiled format for Java programs. Once a Java program has been converted to bytecode, it can be transferred across a network and executed by Java Virtual Machine (JVM).", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407348583164,FeatureID:"637086407348583164",Feature: "event processor", MoSCoW: "", Description: "An event is anything that happens that is significant to an enterprise. Event processing is the capture, enrichment, formatting and emission of events, the subsequent routing and any further processing of emitted events (sometimes in combination with other events), and the consumption of the processed events.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407338151301,FeatureID:"637086407338151301",Feature: "divide-andconquer principle", MoSCoW: "", Description: "A divide-and-conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407335757682,FeatureID:"637086407335757682",Feature: "distributed event service", MoSCoW: "Should-Have", Description: "distributed event service", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407302290519,FeatureID:"637086407302290519",Feature: "centralized event service", MoSCoW: "", Description: "centralized event service", FeatureDataType: "Boolean", FeatureCategory: "Processing", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},] },{id: 5, FeatureID:"",Feature: "Data Management", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407475385232,FeatureID:"637086407475385232",Feature: "Shared-nothing architecture", MoSCoW: "", Description: "A shared-nothing architecture (SN) is a distributed-computing architecture in which each node is independent and self-sufficient, and there is no single point of contention across the system. ", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407473350656,FeatureID:"637086407473350656",Feature: "Share-as-much-as-possible architecture", MoSCoW: "", Description: "Alhtough the concept of a share-as-much-as-possible architecture solves issues associated with the duplication of business functionality, it also tends to lead to tightly coupled components and increases the overall risk associated with change.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407453246686,FeatureID:"637086407453246686",Feature: "Segregation of data queries and manipulation", MoSCoW: "", Description: "Segregate operations that read data from operations that update data by using separate interfaces. This can maximize performance, scalability, and security. Supports the evolution of the system over time through higher flexibility, and prevents update commands from causing merge conflicts at the domain level.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407426470512,FeatureID:"637086407426470512",Feature: "persistent storage (External DBMS)", MoSCoW: "Must-Have", Description: "Persistent storage is any data storage device that retains data after power to that device is shut off. It is also sometimes referred to as non-volatile storage.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "15", FeatureCriterionValue: ""},{id: 637086407413186311,FeatureID:"637086407413186311",Feature: "Notification of modification of data/changes", MoSCoW: "Must-Have", Description: "Notification of modification of data/changes", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407405336586,FeatureID:"637086407405336586",Feature: "multiple data sources", MoSCoW: "Should-Have", Description: "multiple data sources", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},{id: 637086407403735780,FeatureID:"637086407403735780",Feature: "Multiple data models for read and write operations", MoSCoW: "", Description: "Multiple data models for read and write operations", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407382675671,FeatureID:"637086407382675671",Feature: "Knowledge sources (KS)", MoSCoW: "Must-Have", Description: "A knowledge base is a type of database, and this name is typically used with applications that involve some sort of AI functionality such as expert systems data stores or machine learning stores. ", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407350926870,FeatureID:"637086407350926870",Feature: "Eventual consistency", MoSCoW: "Should-Have", Description: "Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407349600416,FeatureID:"637086407349600416",Feature: "event sourcing", MoSCoW: "", Description: "Event sourcing is a data storage model that does not store the current (or last) state, but all changes leading up to the current state.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407323926172,FeatureID:"637086407323926172",Feature: "Decentralized Data Management", MoSCoW: "", Description: "A decentralized database is a database that is located, stored, and maintained in multiple locations.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: ""},{id: 637086407321213394,FeatureID:"637086407321213394",Feature: "Data Conversion/ Transformation", MoSCoW: "", Description: "The Data Conversion transformation converts data in an input to a different data type.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407319727930,FeatureID:"637086407319727930",Feature: "Data Consistency", MoSCoW: "", Description: "Event sourcing is a data storage model that does not store the current (or last) state, but all changes leading up to the current state.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407300944108,FeatureID:"637086407300944108",Feature: "Centralized Data Management", MoSCoW: "Should-Have", Description: "A centralized database (centeralized data access) is a database that is located, stored, and maintained in a single location.", FeatureDataType: "Boolean", FeatureCategory: "Data Management", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: ""},] },{id: 6, FeatureID:"",Feature: "Abstraction", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407466519388,FeatureID:"637086407466519388",Feature: "Separation of concerns", MoSCoW: "", Description: "In computer science, separation of concerns (SoC) is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern. A concern is a set of information that affects the code of a computer program. A concern can be as general as the details of the hardware the code is being optimized for, or as specific as the name of a class to instantiate. A program that embodies SoC well is called a modular program. Modularity, and hence separation of concerns, is achieved by encapsulating information inside a section of code that has a well-defined interface. Encapsulation is a means of information hiding. Layered designs in information systems are another embodiment of separation of concerns (e.g., presentation layer, business logic layer, data access layer, persistence layer).", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "13", FeatureCriterionValue: ""},{id: 637086407463058640,FeatureID:"637086407463058640",Feature: "Separate components", MoSCoW: "Must-Have", Description: "Separate component/layer for encryption, translation and compression of the data", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "8", FeatureCriterionValue: ""},{id: 637086407460575345,FeatureID:"637086407460575345",Feature: "Semantic separation", MoSCoW: "", Description: "Separating the concepts content, presentation, and interaction allows more easily composable specifications. For example, a markup language can be specified independently of a style sheet language. The separation facilitates alternate presentations of the same content, which is seen to have an accessibility advantage and to be more suited to the multiple modalities of Web access.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407447349158,FeatureID:"637086407447349158",Feature: "Reusable components/modules", MoSCoW: "Must-Have", Description: "Reusable software components are designed to apply the power and benefit of reusable, interchangeable parts from other industries to the field of software construction.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "8", FeatureCriterionValue: ""},{id: 637086407431172062,FeatureID:"637086407431172062",Feature: "Proper granularity", MoSCoW: "", Description: "The level of detail considered in a model or decision making process. The greater the granularity, the deeper the level of detail. Granularity is usually used to characterize the scale or level of detail in a set of data.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407406762900,FeatureID:"637086407406762900",Feature: "Multiple view of the same software product/data", MoSCoW: "", Description: "Multiple view of the same software product/data", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407387246557,FeatureID:"637086407387246557",Feature: "levels of abstraction", MoSCoW: "", Description: "The amount of complexity by which a system is viewed or programmed. The higher the level, the less detail. The lower the level, the more detail. The highest level of abstraction is the entire system. The next level would be a handful of components, and so on, while the lowest level could be millions of objects.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407385979944,FeatureID:"637086407385979944",Feature: "LAYERING (Hierachical Organization)", MoSCoW: "Must-Have", Description: "Layering is the organization of programming into separate functional components that interact in some sequential and hierarchical way, with each layer usually having an interface only to the layer above it and the layer below it.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "10", FeatureCriterionValue: ""},{id: 637086407384306396,FeatureID:"637086407384306396",Feature: "lack of shared state", MoSCoW: "", Description: "lack of shared state", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407371564487,FeatureID:"637086407371564487",Feature: "High Cohesion and low Coupling", MoSCoW: "", Description: "In software engineering, coupling is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are; the strength of the relationships between modules. Coupling is usually contrasted with cohesion. Low coupling often correlates with high cohesion, and vice versa.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "20", FeatureCriterionValue: ""},{id: 637086407362020001,FeatureID:"637086407362020001",Feature: "fine-grained services", MoSCoW: "", Description: "A coarse-grained description of a system regards large subcomponents. A fine-grained description regards smaller components of which the larger ones are composed.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407344878437,FeatureID:"637086407344878437",Feature: "Encapsulation (Autonomy)", MoSCoW: "", Description: "Services have control over the logic they encapsulate and,from a service consumer point of view, there is no need to know about their implementation.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "15", FeatureCriterionValue: ""},{id: 637086407311745833,FeatureID:"637086407311745833",Feature: "Componentization via Services", MoSCoW: "", Description: "This feature defines that the components that compose such a system are units of software developed as services implementing well-defined interfaces.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "7", FeatureCriterionValue: ""},{id: 637086407296386297,FeatureID:"637086407296386297",Feature: "Black box reuse", MoSCoW: "", Description: "This means that the interaction between the components is realized by well-defined component interfaces and delegation to other components, without being dependent on concrete implementations of these components.", FeatureDataType: "Boolean", FeatureCategory: "Abstraction", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},] },{id: 7, FeatureID:"",Feature: "Services", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407537617205,FeatureID:"637086407537617205",Feature: "Zero Downtime", MoSCoW: "Must-Have", Description: "Zero Downtime Deployment leads to accelerated time to market, improved productivity, and happy customers.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407505705654,FeatureID:"637086407505705654",Feature: "Synchronized views", MoSCoW: "", Description: "synchronization of data", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407494655185,FeatureID:"637086407494655185",Feature: "stateless from service user�s point of view", MoSCoW: "", Description: "Lack ofstate. By providing a stateless interaction pattern (at least in principle) ,services increase the chance of being reused and aggregated ,especially in a scenario in which a single service is used by multiple consumers that belong to different administrative and business domains.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407420359459,FeatureID:"637086407420359459",Feature: "out-of-the-box feature", MoSCoW: "", Description: "An out-of-the-box feature or functionality (also called OOTB or off the shelf), particularly in software, is a feature or functionality of a product that works immediately after or even without any special installation without any configuration or modification.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407418488772,FeatureID:"637086407418488772",Feature: "Organized around Business Capabilities", MoSCoW: "", Description: "This means that now full-stack developers are required, as they must not only have the competences to use the different technologies involved, but they have to focus on a specific business line and perform different kinds of software engineering activities in this context including development, testing, evolution, deployment, and operations.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407376354191,FeatureID:"637086407376354191",Feature: "Independent deployable components/services", MoSCoW: "", Description: "Independent deployable components/services", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407374808236,FeatureID:"637086407374808236",Feature: "Independant services/components", MoSCoW: "Could-Have", Description: "services are developed and deployed independently and separately in a networked environment", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "18", FeatureCriterionValue: ""},{id: 637086407367027178,FeatureID:"637086407367027178",Feature: "Geographical distributed services", MoSCoW: "", Description: "A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407327906368,FeatureID:"637086407327906368",Feature: "Design for Failure", MoSCoW: "Should-Have", Description: "Different mechanisms for monitoring and logging, which are able to detect and to react to failures as soon as possible. These systems are built upon the assumption that failures eventually emerge; their design intends to keep the system operational in those situations, not affecting the user experience.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407291369219,FeatureID:"637086407291369219",Feature: "Autonomic Components", MoSCoW: "", Description: "autonomy is the capacity to make an informed, un-coerced decision. Autonomous organizations or institutions are independent or self-governing.", FeatureDataType: "Boolean", FeatureCategory: "Services", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},] },{id: 8, FeatureID:"",Feature: "Communication", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407508586682,FeatureID:"637086407508586682",Feature: "Synchronous communication protocols", MoSCoW: "", Description: "In Synchronous Transmission, the sender and receiver should have synchronized clocks before data transmission. Synchronous Communication: It is based on synchronization between the sender and the receiver.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "12", FeatureCriterionValue: ""},{id: 637086407479052614,FeatureID:"637086407479052614",Feature: "Simple Object Access Protocol (SOAP)", MoSCoW: "", Description: "SOAP is a messaging protocol specification for exchanging structured information in the implementation of web services in computer networks. Its purpose is to induce extensibility, neutrality and independence.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "7", FeatureCriterionValue: ""},{id: 637086407443869739,FeatureID:"637086407443869739",Feature: "request-reply communication model", MoSCoW: "", Description: "Request�response can be seen as a telephone call, in which someone is called and they answer the call. Request�response is a message exchange pattern in which a requestor sends a request message to a replier system which receives and processes the request, ultimately returning a message in response.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "11", FeatureCriterionValue: ""},{id: 637086407441225846,FeatureID:"637086407441225846",Feature: "Representational State Transfer(REST)", MoSCoW: "Must-Have", Description: "Representational State Transfer is a software architectural style that defines a set of constraints to be used for creating web services. Web services that conform to the REST architectural style, termed RESTful web services, provide interoperability between computer systems on the Internet.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407435505745,FeatureID:"637086407435505745",Feature: "Publish-and-subscribe message model", MoSCoW: "Must-Have", Description: "Publish/subscribe messaging, or pub/sub messaging, is a form of asynchronous service-to-service communication used in serverless and microservices architectures. In a pub/sub model, any message published to a topic is immediately received by all of the subscribers to the topic. Pub/sub messaging can be used to enable event-driven architectures, or to decouple applications in order to increase performance, reliability and scalability.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "8", FeatureCriterionValue: ""},{id: 637086407433331549,FeatureID:"637086407433331549",Feature: "provided with pre/post-conditions", MoSCoW: "", Description: "A postcondition is a condition or predicate that must always be true just after the execution of some section of code or after an operation in a formal specification. Postconditions are sometimes tested using assertions within the code itself.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407429248328,FeatureID:"637086407429248328",Feature: "prioritization of messages", MoSCoW: "", Description: "Prioritization is the activity that arranges items or activities in order of importance relative to each other.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407395272255,FeatureID:"637086407395272255",Feature: "message-based communication model", MoSCoW: "", Description: "Message passing is a type of communication between processes. Message passing is a form of communication used in parallel programming and object-oriented programming. Communications are completed by the sending of messages (functions, signals and data packets) to recipients. See also Message Passing Interface (MPI).", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "17", FeatureCriterionValue: ""},{id: 637086407391358336,FeatureID:"637086407391358336",Feature: "Location Transparency", MoSCoW: "", Description: "Location transparency is the use of names to identify network resources, rather than their actual location. For example, files are accessed by a unique file name, but the actual data is stored in physical sectors scattered around a disk in either the local computer or in a network.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407372861040,FeatureID:"637086407372861040",Feature: "HTTP API", MoSCoW: "Must-Have", Description: "HTTP stands for HyperText Transfer Protocol and is a way to transfer files. This protocol is used to link pages of hypertext in what we call the world-wide-web. However, there are other transfer protocols available, like FTP and gopher, yet they are less popular.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},{id: 637086407331658634,FeatureID:"637086407331658634",Feature: "dispatcher", MoSCoW: "", Description: "Dispatchers are communications personnel responsible for receiving and transmitting pure and reliable messages, tracking vehicles and equipment, and recording other important information.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "9", FeatureCriterionValue: ""},{id: 637086407294685519,FeatureID:"637086407294685519",Feature: "Bidirectional communication [Full Duplex]", MoSCoW: "Must-Have", Description: "Bidirectional is a communications mode that is capable of transmitting data in both directions (send and receive), but not at the same time. ", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407287643939,FeatureID:"637086407287643939",Feature: "Asynchronous communication protocols", MoSCoW: "", Description: "Asynchronous communication is transmission of data, generally without the use of an external clock signal, where data can be transmitted intermittently rather than in a steady stream. Any timing required to recover data from the communication symbols is encoded within the symbols.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "12", FeatureCriterionValue: ""},{id: 637086407286158050,FeatureID:"637086407286158050",Feature: "API versioning", MoSCoW: "Must-Have", Description: "API versioning allows you to alter behavior between different clients. REST framework provides for a number of different versioning schemes. Versioning is determined by the incoming client request, and may either be based on the request URL, or based on the request headers.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407284761613,FeatureID:"637086407284761613",Feature: "anonymous communication", MoSCoW: "", Description: "An anonymous P2P communication system is a peer-to-peer distributed application in which the nodes, which are used to share resources, or participants are anonymous or pseudonymous.", FeatureDataType: "Boolean", FeatureCategory: "Communication", FeatureParent: "NULL", FeatureSupportedAlternatives: "0", FeatureCriterionValue: ""},] },{id: 9, FeatureID:"",Feature: "Development and Maintanting", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407520458258,FeatureID:"637086407520458258",Feature: "technology-agnostic", MoSCoW: "", Description: "technology-agnostic means that the underlying technology of a service/component is transparent to its clients (consumers).", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},{id: 637086407517186984,FeatureID:"637086407517186984",Feature: "technological heterogeneity", MoSCoW: "", Description: "technological heterogeneity", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407502922911,FeatureID:"637086407502922911",Feature: "Supports duplication and fault tolerance", MoSCoW: "", Description: "Fault tolerance is the property that enables a system to continue operating properly in the event of the failure of some (one or more faults within) of its components. ... The ability of maintaining functionality when portions of a system break down is referred to as graceful degradation.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407491541396,FeatureID:"637086407491541396",Feature: "speedy development of the system", MoSCoW: "", Description: "speedy development of the system", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407457673040,FeatureID:"637086407457673040",Feature: "self-representation design", MoSCoW: "", Description: "self-representation design", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407415026575,FeatureID:"637086407415026575",Feature: "On demand software (SaaS)", MoSCoW: "Must-Have", Description: "On-demand software is a type of software delivery model that is deployed and managed on a vendor&quot;s cloud computing infrastructure and accessed by users over the Internet as and when required. On-demand software is also known as Software as a Service (SaaS), online software and cloud-based software.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407411095458,FeatureID:"637086407411095458",Feature: "No explicit modification of source code", MoSCoW: "", Description: "You do not need to touch existing code when modifying a reflective system. Instead, you specify a change by calling a function of the metaobject protocol. When extending the software, you pass the new code to the meta level as a parameter of the metaobject protocol. The metaobject protocol itself is responsible for integrating your change requests: it performs modifications and extensions to meta-level code, and if necessary recompiles the changed parts and links them to the application while it is executing.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407389632754,FeatureID:"637086407389632754",Feature: "Locality", MoSCoW: "Should-Have", Description: "Data and functionality are maintained and provided locally to the physical place where needed, for example, for independent areas in a production plant.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},{id: 637086407368383553,FeatureID:"637086407368383553",Feature: "gradual transitions to new versions", MoSCoW: "", Description: "gradual transitions to new versions", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},{id: 637086407358668221,FeatureID:"637086407358668221",Feature: "Fast Time-to-Market", MoSCoW: "Should-Have", Description: "In commerce, time to market (TTM) is the length of time it takes from a product being conceived until its being available for sale. TTM is important in industries where products are outmoded quickly.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407352343133,FeatureID:"637086407352343133",Feature: "Evolutionary Design", MoSCoW: "", Description: "Evolutionary design, Continuous design, Evolutive design, or Incremental design is directly related to any modular design application, in which components can be freely substituted to improve the design, modify performance, or change another feature at a later time.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407341332772,FeatureID:"637086407341332772",Feature: "Easy error handling", MoSCoW: "", Description: "easy to find out erroneous component", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407339198469,FeatureID:"637086407339198469",Feature: "dynamic change", MoSCoW: "", Description: "dynamic change of components in system runtime", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "12", FeatureCriterionValue: ""},{id: 637086407329725496,FeatureID:"637086407329725496",Feature: "DevOps", MoSCoW: "Should-Have", Description: "DevOps is a software development methodology that combines software development with information technology operations. The goal of DevOps is to shorten the systems development life cycle while delivering features, fixes, and updates frequently in close alignment with business objectives.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: ""},{id: 637086407304883605,FeatureID:"637086407304883605",Feature: "CI/CD", MoSCoW: "Should-Have", Description: "the Continuous Development and Continuous Integration (CI/CD) process where software is continuously developed and features are also added. This process is constantly integrated with a development, test, staging and production environment.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407289279549,FeatureID:"637086407289279549",Feature: "Automated Testing", MoSCoW: "Should-Have", Description: "Automated testing is the act of conducting specific tests via automation (e.g. a set of regression tests) as opposed to conducting them manually, while test automation refers to automating the process of tracking and managing the different tests.", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "1", FeatureCriterionValue: ""},{id: 637086407282527586,FeatureID:"637086407282527586",Feature: "adaptation of new technologies", MoSCoW: "Could-Have", Description: "adaptation of new technologies", FeatureDataType: "Boolean", FeatureCategory: "Development and Maintanting", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: ""},] },{id: 10, FeatureID:"",Feature: "Quality Aspects", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407530904682,FeatureID:"637086407530904682",Feature: "Variability", MoSCoW: "", Description: "the ability of software systems or artifacts to be adjusted for different contexts", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "11", FeatureCriterionValue: "None"},{id: 637086407529837553,FeatureID:"637086407529837553",Feature: "Usability", MoSCoW: "Must-Have", Description: "degree to which a product or system can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "11", FeatureCriterionValue: "None"},{id: 637086407527432586,FeatureID:"637086407527432586",Feature: "Traceability", MoSCoW: "", Description: "the degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor-successor or master-subordinate relationship to one another;", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "13", FeatureCriterionValue: "None"},{id: 637086407526698157,FeatureID:"637086407526698157",Feature: "Time behavior", MoSCoW: "", Description: "degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "10", FeatureCriterionValue: "None"},{id: 637086407524389410,FeatureID:"637086407524389410",Feature: "Testability", MoSCoW: "", Description: "degree of effectiveness and efficiency with which test criteria can be established for a system, product or component and tests can be performed to determine whether those criteria have been met", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "19", FeatureCriterionValue: "None"},{id: 637086407452488711,FeatureID:"637086407452488711",Feature: "Security", MoSCoW: "Must-Have", Description: "degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "19", FeatureCriterionValue: "None"},{id: 637086407452069855,FeatureID:"637086407452069855",Feature: "Scalability", MoSCoW: "", Description: "Scalability is the capability of a system, network, or process to handle a growing amount of work, or its potential to be enlarged to accommodate that growth. ", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "23", FeatureCriterionValue: "None"},{id: 637086407447049957,FeatureID:"637086407447049957",Feature: "Reusability", MoSCoW: "", Description: "degree to which an asset can be used in more than one system, or in building other assets", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "22", FeatureCriterionValue: "None"},{id: 637086407446780678,FeatureID:"637086407446780678",Feature: "Resource utilization", MoSCoW: "", Description: "degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "7", FeatureCriterionValue: "None"},{id: 637086407440826941,FeatureID:"637086407440826941",Feature: "Replaceability", MoSCoW: "", Description: "degree to which a product can replace another specified software product for the same purpose in the same environment", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "None"},{id: 637086407440009114,FeatureID:"637086407440009114",Feature: "Reliability", MoSCoW: "Must-Have", Description: "degree to which a system, product or component performs specified functions under specified conditions for a specified period", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "17", FeatureCriterionValue: "None"},{id: 637086407428779563,FeatureID:"637086407428779563",Feature: "Portability", MoSCoW: "", Description: "degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "21", FeatureCriterionValue: "None"},{id: 637086407425982182,FeatureID:"637086407425982182",Feature: "Performance efficiency", MoSCoW: "", Description: "performance relative to the amount of resources used under stated conditions", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "22", FeatureCriterionValue: "None"},{id: 637086407398453297,FeatureID:"637086407398453297",Feature: "Modularity", MoSCoW: "", Description: "degree to which a system or computer program is composed of discrete components such that a change to one component has minimal impact on other components", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "14", FeatureCriterionValue: "None"},{id: 637086407398243858,FeatureID:"637086407398243858",Feature: "Modifiability", MoSCoW: "", Description: "degree to which a product or system can be effectively and efficiently modified without introducing defects or degrading existing product quality", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "19", FeatureCriterionValue: "None"},{id: 637086407393691303,FeatureID:"637086407393691303",Feature: "manageability", MoSCoW: "", Description: "How efficiently and easily a software system can be monitored and maintained to keep the system performing, secure, and running smoothly.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: "None"},{id: 637086407393062513,FeatureID:"637086407393062513",Feature: "Maintainability", MoSCoW: "", Description: "degree of effectiveness and efficiency with which a product or system can be modified by the intended maintainers", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "14", FeatureCriterionValue: "None"},{id: 637086407385760529,FeatureID:"637086407385760529",Feature: "Latency", MoSCoW: "", Description: "Latency is a time interval between the stimulation and response, or, from a more general point of view, a time delay between the cause and the effect of some physical change in the system being observed.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "None"},{id: 637086407382466232,FeatureID:"637086407382466232",Feature: "Interoperability", MoSCoW: "", Description: "degree to which two or more systems, products or components can exchange information and use the information that has been exchanged", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "7", FeatureCriterionValue: "None"},{id: 637086407379508334,FeatureID:"637086407379508334",Feature: "Integrity", MoSCoW: "", Description: "degree to which a system, product or component prevents unauthorized access to, or modification of, computer programs or data", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "12", FeatureCriterionValue: "None"},{id: 637086407379288577,FeatureID:"637086407379288577",Feature: "Integrability", MoSCoW: "", Description: "Integrability evaluation refers to testing if separately developed components work correctly together.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "2", FeatureCriterionValue: "None"},{id: 637086407379109054,FeatureID:"637086407379109054",Feature: "Installability", MoSCoW: "Must-Have", Description: "degree of effectiveness and efficiency with which a product or system can be successfully installed and/or uninstalled in a specified environment", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "None"},{id: 637086407374628711,FeatureID:"637086407374628711",Feature: "Implementation Cost", MoSCoW: "", Description: "Estimation of implementation costs based on similar past experiences.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "None"},{id: 637086407374402225,FeatureID:"637086407374402225",Feature: "Implementability", MoSCoW: "", Description: "degree to determine how easily a software product can be implemented.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "10", FeatureCriterionValue: "None"},{id: 637086407364294208,FeatureID:"637086407364294208",Feature: "Flexibility", MoSCoW: "", Description: "it normally refers to the ability for the solution to adapt to possible or future changes in its requirements.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "18", FeatureCriterionValue: "None"},{id: 637086407360573831,FeatureID:"637086407360573831",Feature: "Fault tolerance", MoSCoW: "Must-Have", Description: "degree to which a system, product or component operates as intended despite the presence of hardware or software faults", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "8", FeatureCriterionValue: "None"},{id: 637086407358309161,FeatureID:"637086407358309161",Feature: "Extensibility", MoSCoW: "", Description: "Extensibility is a software engineering and systems design principle where the implementation takes future growth into consideration. The term extensibility can also be seen as a systemic measure of the ability to extend a system and the level of effort required to implement the extension.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "21", FeatureCriterionValue: "None"},{id: 637086407355492331,FeatureID:"637086407355492331",Feature: "Exchangeability", MoSCoW: "", Description: "capable of being exchanged for another or for something else that is equivalent.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "7", FeatureCriterionValue: "None"},{id: 637086407353968887,FeatureID:"637086407353968887",Feature: "Evolvability", MoSCoW: "", Description: "a system&quot;s ability to survive changes in its environment, requirements and implementation technologies", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "14", FeatureCriterionValue: "None"},{id: 637086407341143281,FeatureID:"637086407341143281",Feature: "Ease of development", MoSCoW: "", Description: "Ease of coding and developing", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: "None"},{id: 637086407340953815,FeatureID:"637086407340953815",Feature: "Ease of deployment", MoSCoW: "", Description: "minimal effort to install and run an application.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: "None"},{id: 637086407329452221,FeatureID:"637086407329452221",Feature: "Development Effort", MoSCoW: "", Description: "the process of predicting the most realistic amount of effort required to develop or maintain software based on incomplete, uncertain and noisy input.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: "None"},{id: 637086407316951899,FeatureID:"637086407316951899",Feature: "Cost", MoSCoW: "", Description: "Denotes the amount of money that a company spends on the creation or production of goods or services.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "None"},{id: 637086407314397011,FeatureID:"637086407314397011",Feature: "Confidentiality", MoSCoW: "", Description: "degree to which a product or system ensures that data are accessible only to those authorized to have access", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: "None"},{id: 637086407311476730,FeatureID:"637086407311476730",Feature: "Complexity", MoSCoW: "", Description: "Complexity characterises the behaviour of a system or model whose components interact in multiple ways and follow local rules, meaning there is no reasonable higher instruction to define the various possible interactions.", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "16", FeatureCriterionValue: "None"},{id: 637086407309850887,FeatureID:"637086407309850887",Feature: "Compatibility", MoSCoW: "", Description: "degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions, while sharing the same hardware or software environment", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "None"},{id: 637086407292950159,FeatureID:"637086407292950159",Feature: "Availability", MoSCoW: "Must-Have", Description: "degree to which a system, product or component is operational and accessible when required for use", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "17", FeatureCriterionValue: "None"},{id: 637086407284552174,FeatureID:"637086407284552174",Feature: "Analyzability", MoSCoW: "", Description: "degree of effectiveness and efficiency with which it is possible to assess the impact on a product or system of an intended change to one or more of its parts, or to diagnose a product for deficiencies or causes of failures, or to identify parts to be modified", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "17", FeatureCriterionValue: "None"},{id: 637086407281095953,FeatureID:"637086407281095953",Feature: "Adaptability", MoSCoW: "", Description: "degree to which a product or system can effectively and efficiently be adapted for different or evolving hardware, software or other operational or usage environments", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "17", FeatureCriterionValue: "None"},{id: 637086407280916459,FeatureID:"637086407280916459",Feature: "Accessibility", MoSCoW: "", Description: "degree to which a product or system can be used by people with the widest range of characteristics and capabilities to achieve a specified goal in a specified context of use", FeatureDataType: "Numeric", FeatureCategory: "Quality Aspects", FeatureParent: "NULL", FeatureSupportedAlternatives: "3", FeatureCriterionValue: "None"},] },{id: 11, FeatureID:"",Feature: "Data Access", MoSCoW: "", Description: "", FeatureDataType: "Category", FeatureCategory: "", FeatureParent: "", FeatureSupportedAlternatives: "", FeatureCriterionValue: "", _children: [{id: 637086407500536726,FeatureID:"637086407500536726",Feature: "Supports access control", MoSCoW: "", Description: "Access control is a security technique that regulates who or what can view or use resources in a computing environment. It is a fundamental concept in security that minimizes risk to the business or organization.", FeatureDataType: "Boolean", FeatureCategory: "Data Access", FeatureParent: "NULL", FeatureSupportedAlternatives: "9", FeatureCriterionValue: ""},{id: 637086407482184069,FeatureID:"637086407482184069",Feature: "single access point", MoSCoW: "", Description: "The Single Access Point is a security pattern that describes a single path that is allowed into the system. It is used as a way of managing the complexity of a system, making it where you only have to guard a single entry and exit point.", FeatureDataType: "Boolean", FeatureCategory: "Data Access", FeatureParent: "NULL", FeatureSupportedAlternatives: "5", FeatureCriterionValue: ""},{id: 637086407402160837,FeatureID:"637086407402160837",Feature: "Multiple clients", MoSCoW: "Must-Have", Description: "Multiple users can access to a component/service simultaneously.", FeatureDataType: "Boolean", FeatureCategory: "Data Access", FeatureParent: "NULL", FeatureSupportedAlternatives: "8", FeatureCriterionValue: ""},{id: 637086407325397710,FeatureID:"637086407325397710",Feature: "Decentralized Governance", MoSCoW: "", Description: "This feature is related to the organization around business capabilities, as it leads naturally to decentralized governance.", FeatureDataType: "Boolean", FeatureCategory: "Data Access", FeatureParent: "NULL", FeatureSupportedAlternatives: "6", FeatureCriterionValue: ""},{id: 637086407303417511,FeatureID:"637086407303417511",Feature: "Centralized Governance", MoSCoW: "", Description: "In a centralized control model, one component is designated as the controller and is responsible for managing the execution of other components.", FeatureDataType: "Boolean", FeatureCategory: "Data Access", FeatureParent: "NULL", FeatureSupportedAlternatives: "7", FeatureCriterionValue: ""},{id: 637086407244604175,FeatureID:"637086407244604175",Feature: "Access data simultaneously", MoSCoW: "Must-Have", Description: "Users can access to data simultaneously.", FeatureDataType: "Boolean", FeatureCategory: "Data Access", FeatureParent: "NULL", FeatureSupportedAlternatives: "4", FeatureCriterionValue: ""},] },]; DuplicateDataset=JSON.parse((JSON.stringify(FeatureRequirement_datatable)));